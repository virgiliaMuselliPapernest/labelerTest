name: Auto Label Team PR (Official Method) üöÄ

on:
  # D√©clenche le workflow lors de la cr√©ation ou de la r√©ouverture d'une Pull Request.
  pull_request:
    types: [opened, reopened]

env:
  # ‚û°Ô∏è 1. REMPLACEZ CECI : Le SLUG de votre √©quipe (tout en minuscules, ex: "dev-backend").
  TEAM_SLUG: "app-b2c"
  # ‚û°Ô∏è 2. Le nom du label √† appliquer.
  PR_LABEL: "AppCore"

jobs:
  label_pr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write # ESSENTIEL pour ajouter le label.

    steps:
      - name: Check Team Membership and Apply Label
        # Utilisation de l'action officielle GitHub pour ex√©cuter du code JavaScript
        uses: actions/github-script@v7 
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // R√©cup√©ration des variables d'environnement et de contexte
            const teamSlug = process.env.TEAM_SLUG;
            const prAuthor = context.payload.pull_request.user.login;
            const org = context.repo.owner;
            const prNumber = context.issue.number;
            const label = process.env.PR_LABEL;

            console.log(`Checking if user ${prAuthor} is a member of team ${org}/${teamSlug}...`);

            try {
              // Appel √† l'API GitHub pour v√©rifier l'appartenance √† l'√©quipe.
              // En cas de succ√®s, l'utilisateur est membre (statut 200).
              await github.rest.teams.getMembershipForUserInOrg({
                org: org,
                team_slug: teamSlug,
                username: prAuthor,
              });

              console.log(`‚úÖ User ${prAuthor} is a member! Applying label "${label}".`);

              // Application du label
              await github.rest.issues.addLabels({
                owner: org,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: [label],
              });

              console.log(`Label "${label}" applied successfully.`);

            } catch (error) {
              // Si l'API retourne une erreur 404, cela signifie que l'utilisateur n'est pas membre.
              if (error.status === 404) {
                console.log(`‚ùå User ${prAuthor} is NOT a team member. Skipping label.`);
              } else {
                // Pour toute autre erreur (comme un 403 Forbidden), on la loggue et on l√®ve une erreur.
                console.error(`An unexpected error occurred:`, error.message);
                throw new Error(`Failed to check team membership. Status: ${error.status}`);
              }
            }
